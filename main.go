package main

import (
	"fmt"
	"log"

	"github.com/ArturC03/r2d2/parser"
	"github.com/ArturC03/r2d2/visitor"
	"github.com/antlr4-go/antlr/v4"
)

func main() {
	// Criar um stream de entrada
	input := antlr.NewInputStream(`module cookie{const csc:i32 = 2;pseudo fn main(){var i: i32 = 2; cookie(); while { ds();}}}`) // Ajuste conforme a gram√°tica
	log.Println("‚úÖ Input stream criado.")

	// Criar Lexer
	lexer := parser.NewR2D2Lexer(input)
	if lexer == nil {
		log.Fatal("‚ùå Erro: Lexer n√£o foi inicializado corretamente!")
	}
	log.Println("‚úÖ Lexer criado.")

	// Criar Token Stream
	stream := antlr.NewCommonTokenStream(lexer, 0)
	log.Println("‚úÖ Token stream criado.")

	// Criar Parser
	p := parser.NewR2D2Parser(stream)
	if p == nil {
		log.Fatal("‚ùå Erro: Parser n√£o foi inicializado corretamente!")
	}
	log.Println("‚úÖ Parser criado.")

	// Construir a √°rvore de parse
	p.BuildParseTrees = true
	tree := p.Program() // Ajuste conforme sua regra principal
	if tree == nil {
		log.Fatal("‚ùå Erro: √Årvore sint√°tica n√£o foi criada corretamente!")
	}
	log.Println("‚úÖ √Årvore sint√°tica criada.")

	// Criar e aplicar o Visitor
	v := visitor.NewR2D2Visitor()
	if v == nil {
		log.Fatal("‚ùå Erro: Visitor n√£o foi inicializado corretamente!")
	}
	log.Println("‚úÖ Visitor criado.")

	// Aplicar o visitor na √°rvore - esta √© a forma correta para ANTLR em Go
	result := tree.Accept(v)

	log.Println("‚úÖ Visitor aplicado com sucesso.")

	// Exibir o resultado
	fmt.Println("üöÄ Resultado do Visitor:", result)
}
